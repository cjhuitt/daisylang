Contract: Stringifiable
    Function: String toString()

// Base class (implicitly inherits from Object)
Class: Color is Stringifiable
    red = Integer
    green = Integer
    blue = Integer
    alpha = Integer
    
    Function: String toString()
        return red.toString() + green.toString() + blue.toString() + alpha.toString()

//    Function: Color blended( other: Color )
//        result = Color.default
//        result.red = (red + other.red) / 2
//        result.green = (green + other.green) / 2
//        result.blue = (blue + other.blue) / 2
//        result.alpha = (alpha + other.alpha) / 2
//
//    Function: Color blend!( other: Color )
//        red = (red + other.red) / 2
//        green = (green + other.green) / 2
//        blue = (blue + other.blue) / 2
//        alpha = (alpha + other.alpha) / 2
//
//    Function: Color =( other: Color )
//        red = other.red
//        green = other.green
//        blue = other.blue
//        alpha = other.alpha

color = Color.default()
print( color )
//print( color.fields() )
//print( color.methods() )

//// A contract
//Contract: Dimensional
//    Function: Integer width()
//    Function: Integer height()
//
//// A class fulfilling the contract
//Class: Painting is Dimensional
//    width = Integer
//    height = Integer
//    artist = String
//    primary_color = Color
//
//    Function: Integer width()
//        return width
//
//    using height#self as height()
//
//// A class that meets multiple contracts and delegates them
//Class: Distance is Comperable, Sortable
//    distance = Integer
//
//    delegate Sortable to distance
//    delegate Comperable to distance
//
//    Function: setup( cm: 0, m: 0, ft: 0, in: 0 )
//        // The user will almost certainly only specify one of these, but since
//        // we total them, it doesn't matter if they are zeroed or not.
//        distance = cm + 100 * m + 2 * in + 30 * ft
//
//    Function: Integer centimeters()
//        return distance
//
//
// A class with an init function is called when the class's create function
// is called, with the same parameters.  A Dirty class is cleaned up when
// the last reference to it goes out of scope, allowing RAII.
//Class: Socket is Dirty
//    device = String
//    is_open = false
//
//    Function: None init( dev: String )
//        device = dev
//        if open( device )
//            is_open = true
//
//    Function: None cleanup()
//        if is_open
//            close( device )
